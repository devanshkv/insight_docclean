{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"insight_docclean Clean your docs! I am gonna dump data here.","title":"Core"},{"location":"#insight_docclean","text":"Clean your docs! I am gonna dump data here.","title":"insight_docclean"},{"location":"AutoEncoder/","text":"Autoencoder class docclean . autoencoder . Autoencoder ( img_rows = 256 , img_cols = 256 , nchans = 3 , mixed_precision_training = False , early_stopping = 25 ) Autoencoder class. Args: img_rows (int): Number of pixel rows img_cols (int): Number of pixel columns nchans (int): Number of color channels mixed_precision (bool): Train with fp16 mixed precision early_stopping (int): Patience for early stopping build_model method Autoencoder . build_model () Build the autoencoder model Returns: tf.keras.Model: The autoencoder model train_model method Autoencoder . train_model ( train_dataset , epochs = 100 , validation_data = None ) Train the autoencoder Args: train_dataset (tf.data.Dataset) : Training dataset epochs (int): Number of epochs to train for validation_data (tf.data.Dataset) : Validation dataset Returns: dict: Training history","title":"Autoencoder"},{"location":"AutoEncoder/#autoencoder-class","text":"docclean . autoencoder . Autoencoder ( img_rows = 256 , img_cols = 256 , nchans = 3 , mixed_precision_training = False , early_stopping = 25 ) Autoencoder class. Args: img_rows (int): Number of pixel rows img_cols (int): Number of pixel columns nchans (int): Number of color channels mixed_precision (bool): Train with fp16 mixed precision early_stopping (int): Patience for early stopping","title":"Autoencoder class"},{"location":"AutoEncoder/#build_model-method","text":"Autoencoder . build_model () Build the autoencoder model Returns: tf.keras.Model: The autoencoder model","title":"build_model method"},{"location":"AutoEncoder/#train_model-method","text":"Autoencoder . train_model ( train_dataset , epochs = 100 , validation_data = None ) Train the autoencoder Args: train_dataset (tf.data.Dataset) : Training dataset epochs (int): Number of epochs to train for validation_data (tf.data.Dataset) : Validation dataset Returns: dict: Training history","title":"train_model method"},{"location":"CycleGAN/","text":"CycleGan class docclean . cycle_gan . CycleGan ( * args , ** kwargs ) Cycle GAN in tensorflow based on the pix2pix. Args: checkpoint_path: Where to put the checkpoints restore_checpoint: Restore old checkpoints or not train method CycleGan . train ( dirty_images , clean_images , epochs = 50 ) Training function. Args: dirty_images (tf.data.Dataset): dirty images dataset clean_images (tf.data.Dataset): clean images dataset epochs (int): Number of epochs to run","title":"Cycle GAN"},{"location":"CycleGAN/#cyclegan-class","text":"docclean . cycle_gan . CycleGan ( * args , ** kwargs ) Cycle GAN in tensorflow based on the pix2pix. Args: checkpoint_path: Where to put the checkpoints restore_checpoint: Restore old checkpoints or not","title":"CycleGan class"},{"location":"CycleGAN/#train-method","text":"CycleGan . train ( dirty_images , clean_images , epochs = 50 ) Training function. Args: dirty_images (tf.data.Dataset): dirty images dataset clean_images (tf.data.Dataset): clean images dataset epochs (int): Number of epochs to run","title":"train method"},{"location":"Utils/","text":"get_png_data function docclean . utils . get_png_data ( fname ) Read png data into tf tensors. Args: fname (str): file path Returns: tf.Tensor: image tensor get_kaggle_paired_data function docclean . utils . get_kaggle_paired_data ( fname ) Get kaggle paired data Args: fname (str): File Name Returns: Tuple [tf.Tensor, tf.Tensor] : Dirty and Claen image get_kaggle_data function docclean . utils . get_kaggle_data ( fname ) Read kaggle png data into tf tensors. Args: fname (str): file path Returns: tf.Tensor: image tensor normalize function docclean . utils . normalize ( image ) Normalise the image by casting it to float and scaling between -1 and 1 Args: image (tf.Tensor): imgae tensor Returns: tf.Tensor: Normalised image books_crop_and_augment function docclean . utils . books_crop_and_augment ( image , size = ( 256 , 256 ), num_boxes = 1 , rotate = True , flips = True ) Augments the book pages by zooming, cropping, rotating and fliiping Args: image (tf.Tensor) : image tensor size (Tuple) : size to crop the image tensor num_boxes (int): Number of patches from the image rotate (bool): If random 90 degree rotations flips (bool): If random LR and UD flips Returns: tf.Tensor: Augmented image kaggle_paired_augment function docclean . utils . kaggle_paired_augment ( dirty , clean , size = ( 256 , 256 ), rotate = True , flips = True ) Augments the book pages by zooming, cropping, rotating and fliiping Args: dirty (tf.Tensor) : image tensor clean (tf.Tensor) : image tensor size (Tuple) : size to crop the image tensor rotate (bool): If random 90 degree rotations flips (bool): If random LR and UD flips Returns: tf.Tensor: Augmented image","title":"Utils"},{"location":"Utils/#get_png_data-function","text":"docclean . utils . get_png_data ( fname ) Read png data into tf tensors. Args: fname (str): file path Returns: tf.Tensor: image tensor","title":"get_png_data function"},{"location":"Utils/#get_kaggle_paired_data-function","text":"docclean . utils . get_kaggle_paired_data ( fname ) Get kaggle paired data Args: fname (str): File Name Returns: Tuple [tf.Tensor, tf.Tensor] : Dirty and Claen image","title":"get_kaggle_paired_data function"},{"location":"Utils/#get_kaggle_data-function","text":"docclean . utils . get_kaggle_data ( fname ) Read kaggle png data into tf tensors. Args: fname (str): file path Returns: tf.Tensor: image tensor","title":"get_kaggle_data function"},{"location":"Utils/#normalize-function","text":"docclean . utils . normalize ( image ) Normalise the image by casting it to float and scaling between -1 and 1 Args: image (tf.Tensor): imgae tensor Returns: tf.Tensor: Normalised image","title":"normalize function"},{"location":"Utils/#books_crop_and_augment-function","text":"docclean . utils . books_crop_and_augment ( image , size = ( 256 , 256 ), num_boxes = 1 , rotate = True , flips = True ) Augments the book pages by zooming, cropping, rotating and fliiping Args: image (tf.Tensor) : image tensor size (Tuple) : size to crop the image tensor num_boxes (int): Number of patches from the image rotate (bool): If random 90 degree rotations flips (bool): If random LR and UD flips Returns: tf.Tensor: Augmented image","title":"books_crop_and_augment function"},{"location":"Utils/#kaggle_paired_augment-function","text":"docclean . utils . kaggle_paired_augment ( dirty , clean , size = ( 256 , 256 ), rotate = True , flips = True ) Augments the book pages by zooming, cropping, rotating and fliiping Args: dirty (tf.Tensor) : image tensor clean (tf.Tensor) : image tensor size (Tuple) : size to crop the image tensor rotate (bool): If random 90 degree rotations flips (bool): If random LR and UD flips Returns: tf.Tensor: Augmented image","title":"kaggle_paired_augment function"}]}